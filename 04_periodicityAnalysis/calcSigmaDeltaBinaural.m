function [sigma, delta, FilterStates] = ...
  calcSigmaDeltaBinaural(subbandSignal, p0SearchRangeSamplesVector, ...
  FilterStates, mode, varargin)
    
    switch mode
        case 'range'
            [sigma.L, delta.L, FilterStates.L.p0DetectionFIFO] = ...
                calcSigmaDeltaRange(subbandSignal.L, ...
                p0SearchRangeSamplesVector, FilterStates.L.p0DetectionFIFO);
            [sigma.R, delta.R, FilterStates.R.p0DetectionFIFO] = ...
                calcSigmaDeltaRange(subbandSignal.R, ...
                p0SearchRangeSamplesVector, FilterStates.R.p0DetectionFIFO);
        case 'discrete'
            p0CandidateIndexVector = varargin{1};
            [sigma.L, delta.L, FilterStates.L.p0CandidateFIFO] = ...
                calcSigmaDeltaDiscrete(subbandSignal.L,...
                p0SearchRangeSamplesVector, p0CandidateIndexVector.L,...
                FilterStates.L.p0CandidateFIFO);
            [sigma.R, delta.R, FilterStates.R.p0CandidateFIFO] = ...
                calcSigmaDeltaDiscrete(subbandSignal.R,...
                p0SearchRangeSamplesVector, p0CandidateIndexVector.R,...
                FilterStates.R.p0CandidateFIFO);
        otherwise
            warning('must specify mode (range or discrete)')
    end


end

